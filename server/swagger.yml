openapi: '3.0.2'
info:
  title: TrenGo API documentation
  version: '1.0'
servers:
  - url: http://localhost:5050/
paths:
  /utenti:
    post:
      tags:
        - utenti
      summary: Crea un nuovo utente
      description: Può essere invocata solo da un user autenticato con successo
      operationId: Crea utente
      requestBody:
        description: Richiede username, email e password del nuovo utente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Utente'
          application/xml:
            schema:
              $ref: '#/components/schemas/Utente'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Utente'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utente'
            application/xml:
              schema:
                $ref: '#/components/schemas/Utente'
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/Utente'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /proposte:
    post:
      tags:
        - proposte
      summary: Crea una nuova proposta
      description: Può essere invocata solo da un user autenticato con successo
      operationId: Crea proposta
      requestBody:
        description: Un oggetto proposta
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Proposta'
          application/xml:
            schema:
              $ref: '#/components/schemas/Proposta'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Proposta'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposta'
            application/xml:
              schema:
                $ref: '#/components/schemas/Proposta' 
components:
  schemas:
    Utente:
      type: object
      properties:
        username:
          type: string
          example: Marcolino
          required: true
        tipoUtente:
          type: string
          description: tipo di utente
          example: autenticato
          enum:
            - nonAutenticato
            - autenticato
            - grandeOrganizzatore
        nome:
          type: string
          example: Marco
        cognome:
          type: string
          example: Lino
        email:
          type: string
          example: marcolino@email.com
        password:
          type: string
          example: Marcolino1!
        karma:
          type: integer
          example: 70
        interessi:
          type: array
          items:
            type: string
          example: ["arrampicata", "escursioni", "corse"]
        followers:
          type: array
          items:
            type: string
          example: ["Marcolino", " Marcoseta", "Marcolana"]
      xml:
        name: utente
    Proposta:
      type: object
      properties:
        idProposta:
          type: integer
          format: int64
          example: 10
        usernameCreatore:
          type: string
          example: Marcotone
        categorieProposta:
          type: array
          items:
            type: string
          example: ["arrampicata", "escursioni", "corse"]
          minItems: 1
        nomeLuogo:
          type: string
          example: Piazza Dante
        coordinate:
          type: array
          items:
            type: number
          example: [4.49965, 52.06891]
          minItems: 2
        descrizione:
          type: string
          example: Vediamoci in piazza per poi andare a fare un giro
        numeroPartecipantiDesidesrato: 
          type: integer
          format: int64
          example: 10
        numeroPartecipanti: 
          type: integer
          format: int64
          example: 10
        data:
          type: string
          format: date-time
          example: 2024-07-21T17:32:28Z
        idChat:
          type: integer
          format: int64
        partecipanti:
          type: array
          items: 
            description: username dei partecipanti
            type: string
          example: ["Marcolino", " Marcoseta", "Marcolana"]
          minItems: 1
        stato:
          type: boolean
      xml:
        name: proposta
