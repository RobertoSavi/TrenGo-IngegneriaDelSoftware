openapi: '3.0.0'
info:
  title: TrenGo API documentation
  version: '1.0'
servers:
  - url: http://localhost:5050/
paths:
  /utenti/signup:
    post:
      tags:
        - utenti
      summary: Registra un nuovo utente con i parametri passati
      description: Può essere invocata solo da un user autenticato con successo
      operationId: utentiSignup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Utente registrato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: Username dell'utente
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /utenti/login:
    post:
      tags:
        - utenti
      summary: Effettua il login dell'utente
      description: ''
      operationId: utentiLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Utente ha effettuato il login con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: Username dell'utente
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /user/logout:
    get:
      tags:
        - utenti
      summary: Effettua il logout dell'utente
      description: ''
      operationId: utentiLogout
      responses:
        '200':
          description: Utente ha effettuato il logout con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: Username dell'utente
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /utenti/{username}:
    get:
      tags:
        - utenti
      summary: Get utente by username
      description: ''
      operationId: utentiGetByUsername
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Dati utente recuperati con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utente'
        '400':
          description: Bad request
        '500':
          description: Internal server error
    put:
      tags:
        - utenti
      summary: Update utente by username
      description: Può essere chiamata solo da un user autenticato con successo
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Utente'
          application/xml:
            schema:
              $ref: '#/components/schemas/Utente'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Utente'
      responses:
        '200':
          description: Dati utente modificati con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utente'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /proposte:
    post:
      tags:
        - proposte
      summary: Crea una nuova proposta
      description: Può essere invocata solo da un user autenticato con successo
      operationId: Crea proposta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usernameCreatore:
                  type: string
                intercategoriePropostaessi:
                  type: array
                  items:
                    type: string
                nomeLuogo:
                  type: string
                numeroPartecipantiDesiderato:
                  type: integer
                data:
                  type: string
                  format: date-time
                stato:
                  type: boolean
      responses:
        '200':
          description: Proposta creata con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposta'
        '400':
          description: Bad request
        '500':
          description: Internal server error
components:
  schemas:
    Utente:
      type: object
      required:  
        - username
        - tipoUtente
        - nome
        - cognome
        - email
        - password
      properties:
        username:
          type: string
          description: Username dell'utente
          example: Marcolino
        tipoUtente:
          type: string
          description: Il tipo di utente
          example: autenticato
          enum:
            - nonAutenticato
            - autenticato
            - grandeOrganizzatore
        nome:
          type: string
          description: Nome dell'utente
          example: Marco
        cognome:
          type: string
          description: Cognome dell'utente
          example: Lino
        email:
          type: string
          description: Email dell'utente
          example: marcolino@email.com
        password:
          type: string
          description: Password dell'utente
          example: Marcolino1!
        karma:
          type: integer
          description: Karma dell'utente
          example: 70
        interessi:
          type: array
          description: Interessi dell'utente
          items:
            type: string
          example: ["arrampicata", "escursioni", "corse"]
          minItems: 0
        following:
          type: array
          description: Lista degli username degli utenti seguiti dall'utente 
          items:
            type: string
          example: ["Marcolino", " Marcoseta", "Marcolana"]
          minItems: 0
      xml:
        name: utente
    Proposta:
      type: object
      required:  
        - idProposta
        - usernameCreatore
        - categorieProposta
        - nomeLuogo
        - numeroPartecipantiDesiderato
        - data
        - stato
      properties:
        idProposta:
          type: integer
          format: int64
          description: Id della proposta
          example: 10
        usernameCreatore:
          type: string
          description: Username del creatore della proposta
          example: Marcotone
        categorieProposta:
          type: array
          items:
            type: string
          description: Lista delle categorie alle quali appartiene la proposta
          example: ["arrampicata", "escursioni", "corse"]
          minItems: 1
        nomeLuogo:
          type: string
          description: Nome del luogo della proposta
          example: Piazza Dante
        coordinate:
          type: array
          items:
            type: number
          description: Coordinate del luogo della proposta
          example: [4.49965, 52.06891]
          minItems: 2
        descrizione:
          type: string
          description: Descrizione della proposta
          example: Vediamoci in piazza per poi andare a fare un giro
        numeroPartecipantiDesiderato: 
          type: integer
          format: int64
          description: Numero di partecipanti desiderato dal creatore della proposta
          example: 10
        numeroPartecipanti: 
          type: integer
          format: int64
          description: Numero di partecipanti attuali della proposta
          example: 10
        data:
          type: string
          format: date-time
          description: Data prevista per la proposta
          example: 2024-07-21T17:32:28Z
        idChat:
          type: integer
          description: Id della chat allegata alla proposta
          format: int64
        partecipanti:
          type: array
          items: 
            type: string
          description: username dei partecipanti
          example: ["Marcolino", " Marcoseta", "Marcolana"]
          minItems: 1
        stato:
          type: boolean
          description: Stato della proposta [false = chiusa, true = aperta]
          default: true
          example: true
      xml:
        name: proposta
